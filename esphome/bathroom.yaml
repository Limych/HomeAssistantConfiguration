substitutions:
  device_name: "Bathroom"
  device_ip: 192.168.1.64
  
  default_threshold: '75.0'
  default_timeout: '5'
  
  <<: !include secrets.yaml

esphome:
  name: bathroom
  platform: ESP8266
  board: esp01_1m
  on_boot:
    priority: -10
    then:
      - sensor.template.publish:
          id: fan_humidity_threshold
          state: $default_threshold

status_led:
  pin:
    number: GPIO13
    inverted: True

wifi:
  ssid: $wifi_ssid
  password: !secret wifi_password
  domain: !secret network_domain

  manual_ip:
    static_ip: $device_ip
    gateway: !secret network_gateway
    subnet: !secret network_mask

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Fallback Hotspot"
    password: !secret ota_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret ota_password
  services:
    - service: run_fan_with_timeout
      variables:
        duration: int
      then:
        - if:
            condition:
              script.is_running: run_with_timeout
            then:
              - logger.log: "Fan run timer terminated"
              - script.stop: run_with_timeout
        - if:
            condition:
              lambda: 'return duration > 0;'
            then:
              - globals.set:
                  id: run_timeout
                  value: !lambda 'return duration;'
            else:
              - globals.set:
                  id: run_timeout
                  value: $default_timeout
        - script.execute: run_with_timeout

    - service: set_fan_humidity_threshold
      variables:
        threshold: int
        duration: int
      then:
        - if:
            condition:
              script.is_running: run_threshold_timeout
            then:
              - logger.log: "Humidity threshold change timer terminated"
              - script.stop: run_threshold_timeout
            else:
              - lambda: "id(old_threshold) = id(fan_humidity_threshold).state;"
        - if:
            condition:
              lambda: 'return duration > 0;'
            then:
              - globals.set:
                  id: threshold_timeout
                  value: !lambda 'return duration;'
              - script.execute: run_threshold_timeout
        - if:
            condition:
              lambda: 'return threshold == 0;'
            then:
              - sensor.template.publish:
                  id: fan_humidity_threshold
                  state: $default_threshold
            else:
              - sensor.template.publish:
                  id: fan_humidity_threshold
                  state: !lambda 'return threshold;'
        - if:
            condition:
              lambda: 'return id(humi).state >= id(fan_humidity_threshold).state;'
            then:
              - fan.turn_on: bathroom_fan

ota:
  password: !secret ota_password

web_server:
  port: 80
  auth:
    username: admin
    password: !secret web_server_password

globals:
  - id: threshold_timeout
    type: int
  
  - id: run_timeout
    type: int
  
  - id: old_threshold
    type: float

output:
  - platform: gpio
    pin: GPIO12
    id: fan_relay

fan:
  - platform: binary
    output: fan_relay
    name: "${device_name} Fan"
    id: bathroom_fan

binary_sensor:
  - platform: gpio
    name: "${device_name} Fan Button"
    id: bathroom_fan_button
    pin:
      number: GPIO0
      inverted: True
    on_press:
      then:
        - if:
            condition:
              script.is_running: run_with_timeout
            then:
              - logger.log: "Fan run timer terminated"
              - script.stop: run_with_timeout
        - globals.set:
            id: run_timeout
            value: $default_timeout
        - script.execute: run_with_timeout

sensor:
  - platform: uptime
    name: "${device_name} Uptime"
    id: device_uptime

  - platform: template
    name: "${device_name} Fan Humidity Threshold"
    id: fan_humidity_threshold

  - platform: dht
    model: SI7021
    pin: GPIO14
    update_interval: 60s
    humidity:
      name: "${device_name} Humidity"
      id: humi
      on_value:
        - if:
            condition:
              lambda: 'return x >= id(fan_humidity_threshold).state;'
            then:
              - fan.turn_on: bathroom_fan
            else:
              - if:
                  condition:
                    - lambda: 'return x <= id(fan_humidity_threshold).state - 5;'
                    - not:
                        script.is_running: run_with_timeout
                  then:
                    - fan.turn_off: bathroom_fan
    temperature:
      name: "${device_name} Temperature"

script:
  - id: run_with_timeout
    then:
      - logger.log: "Turning on fan. Fan run timer reset"
      - fan.turn_on: bathroom_fan
      - delay: !lambda 'return id(run_timeout) * 60000;'
      - logger.log: "Fan run timeout reached. Turning off fan"
      - if:
          condition:
            lambda: 'return id(humi).state <= id(fan_humidity_threshold).state - 5;'
          then:
            - fan.turn_off: bathroom_fan

  - id: run_threshold_timeout
    then:
      - logger.log: "Humidity threshold change timer reset"
      - delay: !lambda 'return id(threshold_timeout) * 60000;'
      - logger.log: "Humidity threshold change timer reached. Restore previous threshold"
      - lambda: 'id(fan_humidity_threshold).publish_state(id(old_threshold));'
      - if:
          condition:
            - lambda: 'return id(humi).state <= id(fan_humidity_threshold).state - 5;'
            - not:
                script.is_running: run_with_timeout
          then:
            - fan.turn_off: bathroom_fan
